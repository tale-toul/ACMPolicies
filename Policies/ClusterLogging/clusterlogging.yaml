apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/description: Cluster Logging Custom Resource Creation
  name: clusterlogging
  namespace: policies
spec:
  disabled: true
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: lokistack
    namespace: policies
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: logging-operator-install
    namespace: policies
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: odf-storagecluster
    namespace: policies
  policy-templates:
#Configmap-Set data retention configuration in S3 bucket
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: clusterlogging-data-retention-configmap
      spec:
        pruneObjectBehavior: DeleteIfCreated
        remediationAction: enforce
        severity: high
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: sets3lifecycle-configmap
              namespace: openshift-logging
            data:
              sets3lifecycle.sh: |
                #!/bin/bash
                #Argument $1 is the file path containing the lifecycle configuration in xml format

                ACCESS_KEY_ID={{ fromSecret "openshift-logging" "loki-bucket-odf" "AWS_ACCESS_KEY_ID" | base64dec }}
                SECRET_ACCESS_KEY={{ fromSecret "openshift-logging" "loki-bucket-odf" "AWS_SECRET_ACCESS_KEY" | base64dec }}

                HOSTNAME={{ fromConfigMap "openshift-logging" "loki-bucket-odf" "BUCKET_HOST" }}
                REGION=""
                AWS_SERVICE="s3"

                HTTP_METHOD="PUT"
                CANONICAL_URI="/{{ fromConfigMap "openshift-logging" "loki-bucket-odf" "BUCKET_NAME" }}/"
                CANONICAL_QUERY_STRING="lifecycle="

                LIFECYCLE_CONF=$(cat <<EOF
                <LifecycleConfiguration>
                    <Rule>
                        <ID>logging-data-expire</ID>
                        <Filter>
                          <Prefix></Prefix>
                        </Filter>
                        <Status>Enabled</Status>
                        <Expiration>
                             <Days>1</Days>
                        </Expiration>
                    </Rule>
                </LifecycleConfiguration>
                EOF
                )

                #Retreive current date in appropriate format
                DATE_AND_TIME=$(date -u +"%Y%m%dT%H%M%SZ")
                DATE=$(date -u +"%Y%m%d")
                CONTENT_SHA256=$(echo -n "$LIFECYCLE_CONF" | openssl dgst -sha256 | cut -d ' ' -f 2)
                CONTENT_MD5=$(echo -n "$LIFECYCLE_CONF" | openssl dgst -md5 -binary |openssl enc -base64)

                #Store Canonical request
                #The blank line is important according to the schema https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html
                CANONICAL_REQ=$(cat <<EOF
                $HTTP_METHOD
                $CANONICAL_URI
                $CANONICAL_QUERY_STRING
                content-md5:$CONTENT_MD5
                host:$HOSTNAME
                x-amz-content-sha256:$CONTENT_SHA256
                x-amz-date:$DATE_AND_TIME

                content-md5;host;x-amz-content-sha256;x-amz-date
                $CONTENT_SHA256
                EOF
                )

                # Generate canonical request hash
                CANONICAL_REQUEST_HASH=$(echo -n "$CANONICAL_REQ" | openssl dgst -sha256 | awk -F ' ' '{print $2}')

                # Function to generate sha256 hash
                function hmac_sha256 {
                  key="$1"
                  data="$2"
                  echo -n "$data" | openssl dgst -sha256 -mac HMAC -macopt "$key" | sed 's/^.* //'
                }

                # Compute signing key
                DATE_KEY=$(hmac_sha256 key:"AWS4$SECRET_ACCESS_KEY" $DATE)
                DATE_REGION_KEY=$(hmac_sha256 hexkey:$DATE_KEY $REGION)
                DATE_REGION_SERVICE_KEY=$(hmac_sha256 hexkey:$DATE_REGION_KEY $AWS_SERVICE)
                HEX_KEY=$(hmac_sha256 hexkey:$DATE_REGION_SERVICE_KEY "aws4_request")

                # Store string to sign
                SIGN_STRING=$(cat <<EOF
                AWS4-HMAC-SHA256
                $DATE_AND_TIME
                $DATE/$REGION/$AWS_SERVICE/aws4_request
                $CANONICAL_REQUEST_HASH
                EOF
                )

                # Generate signature
                SIGNATURE=$(echo -n "$SIGN_STRING" | openssl dgst -sha256 -mac HMAC -macopt hexkey:$HEX_KEY | awk -F ' ' '{print $2}')

                # HTTP Request using signature
                curl -k https://${HOSTNAME}${CANONICAL_URI}?lifecycle= \
                  -X $HTTP_METHOD \
                  -H "content-md5: $CONTENT_MD5" \
                  -H "Authorization: AWS4-HMAC-SHA256 Credential=$ACCESS_KEY_ID/$DATE/$REGION/$AWS_SERVICE/aws4_request, SignedHeaders=content-md5;host;x-amz-content-sha256;x-amz-date, Signature=$SIGNATURE" \
                  -H "x-amz-content-sha256: $CONTENT_SHA256" \
                  -H "x-amz-date: $DATE_AND_TIME" \
                  -H "content-type:" \
                  --data "$LIFECYCLE_CONF"
#Job-Set data retention configuration in S3 bucket
  - extraDependencies:
     - apiVersion: policy.open-cluster-management.io/v1
       kind: ConfigurationPolicy
       name: clusterlogging-data-retention-configmap
       namespace: ""
       compliance: Compliant
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: clusterlogging-data-retention-job
      spec:
        pruneObjectBehavior: DeleteIfCreated
        remediationAction: enforce
        severity: high
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: batch/v1
            kind: Job
            metadata:
              name: set-data-retention
              namespace: openshift-logging
            spec:
              backoffLimit: 2
              completions: 1
              parallelism: 1
              template:
                metadata:
                  name: set-data-retention
                spec:
                  containers:
                  - name: lifecycleload
                    image: registry.redhat.io/openshift4/ose-cli
                    command: ["/scripts/sets3lifecycle.sh"]
                    volumeMounts:
                      - name: script
                        mountPath: "/scripts"
                  volumes:
                    - name: script
                      configMap:
                        name: sets3lifecycle-configmap
                        defaultMode: 0755
                  restartPolicy: Never
                  terminationGracePeriodSeconds: 30
                  activeDeadlineSeconds: 300
                  dnsPolicy: "ClusterFirst"
#Check Job completion
  - extraDependencies:
     - apiVersion: policy.open-cluster-management.io/v1
       kind: ConfigurationPolicy
       name: clusterlogging-data-retention-job
       namespace: ""
       compliance: Compliant
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: clusterlogging-data-retention-job-check
      spec:
        remediationAction: inform
        severity: high
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: batch/v1
            kind: Job
            metadata:
              name: set-data-retention
              namespace: openshift-logging
            status:
              conditions:
                - type: Complete
                  status: 'True'
              succeeded: 1
#Create Cluster Logging Custom Resource
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: clusterlogging-custom-resource
      spec:
        pruneObjectBehavior: None
        remediationAction: enforce
        severity: high
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: logging.openshift.io/v1
            kind: ClusterLogging
            metadata:
              name: instance
              namespace: openshift-logging
            spec:
              managementState: Managed
              logStore:
                type: lokistack
                lokistack:
                  name: logging-loki
              visualization:
                type: ocp-console
              collection:
                type: vector
                resources:
                  limits:
                    cpu: 600m
                    memory: 1024Mi
                  requests:
                    cpu: 200m
                    memory: 256Mi
#Check Cluster Logging Custom Resource
  - extraDependencies:
     - apiVersion: policy.open-cluster-management.io/v1
       kind: ConfigurationPolicy
       name: clusterlogging-custom-resource
       namespace: ""
       compliance: Compliant
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: clusterlogging-custom-resource-check
      spec:
        pruneObjectBehavior: None
        remediationAction: inform
        severity: high
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: logging.openshift.io/v1
            kind: ClusterLogging
            metadata:
              name: instance
              namespace: openshift-logging
            status:
              conditions:
              - status: "True"
                type: Ready
#Enable Logging Console Plugin
  - extraDependencies:
     - apiVersion: policy.open-cluster-management.io/v1
       kind: ConfigurationPolicy
       name: clusterlogging-custom-resource
       namespace: ""
       compliance: Compliant
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: clusterlogging-console-plugin
      spec:
        pruneObjectBehavior: None
        remediationAction: enforce
        severity: high
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: operator.openshift.io/v1
            kind: Console
            metadata:
              annotations:
                logging.openshift.io/ocp-console-migration-target: "lokistack-dev"
              name: cluster
            spec:
              plugins:
              - logging-view-plugin
